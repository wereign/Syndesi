/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => Syndesi
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var import_child_process = require("child_process");
var DefaultSettings = {
  maxLevel: 4
};
var Syndesi = class extends import_obsidian.Plugin {
  async loadSettings() {
    this.settings = Object.assign(
      {},
      DefaultSettings,
      await this.loadData()
    );
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  onload() {
    console.log("Loading Plugin");
    this.registerEvent(
      this.app.vault.on("modify", this.onFileModify.bind(this))
    );
    this.addCommand({
      id: "create-mindmap",
      name: "Convert Current Document to Mindmap",
      callback: this.convertToMindmap.bind(this)
    });
  }
  onFileModify(file) {
    const activeFile = this.app.workspace.getActiveFile();
    if (file.path === (activeFile == null ? void 0 : activeFile.path)) {
      console.log(`File modified: ${file.path}`);
      this.convertToMindmap();
      new import_obsidian.Notice("Updated Mindmap");
    }
  }
  convertToMindmap() {
    const activeFile = this.app.workspace.getActiveFile();
    if (!activeFile) {
      console.log("No active file found.");
      return;
    }
    const basePath = this.app.vault.adapter.basePath;
    const docPath = activeFile.path;
    const docAbsPath = `${basePath}\\${docPath}`;
    const canvasPath = docPath.replace(".md", ".canvas");
    const canvasAbsPath = `${basePath}\\${canvasPath}`;
    console.log("Document path", docAbsPath);
    console.log("Canvas path", canvasAbsPath);
    const pythonPath = `${basePath}\\.obsidian\\plugins\\Syndesi\\main.py`;
    const command = `python "${pythonPath}" --src "${docAbsPath}" --dest "${canvasAbsPath}"`;
    (0, import_child_process.exec)(command, (error, stdout, stderr) => {
      if (error) {
        console.error(`Error: ${error.message}`);
        return;
      }
      if (stderr) {
        console.error(`Stderr: ${stderr}`);
        return;
      }
      console.log(`Stdout: ${stdout}`);
    });
    console.log("End");
  }
  onunload() {
    console.log("Unloading Plugin");
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHsgTm90aWNlLCBQbHVnaW4gfSBmcm9tIFwib2JzaWRpYW5cIjtcclxuaW1wb3J0IHsgZXhlYyB9IGZyb20gXCJjaGlsZF9wcm9jZXNzXCI7XHJcblxyXG5pbnRlcmZhY2UgUGx1Z2luU2V0dGluZ3Mge1xyXG5cdG1heExldmVsOiBudW1iZXI7XHJcbn1cclxuXHJcbmNvbnN0IERlZmF1bHRTZXR0aW5nczogUGFydGlhbDxQbHVnaW5TZXR0aW5ncz4gPSB7XHJcblx0bWF4TGV2ZWw6IDQsXHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTeW5kZXNpIGV4dGVuZHMgUGx1Z2luIHtcclxuXHRzZXR0aW5nczogUGx1Z2luU2V0dGluZ3M7XHJcblxyXG5cdGFzeW5jIGxvYWRTZXR0aW5ncygpIHtcclxuXHRcdHRoaXMuc2V0dGluZ3MgPSBPYmplY3QuYXNzaWduKFxyXG5cdFx0XHR7fSxcclxuXHRcdFx0RGVmYXVsdFNldHRpbmdzLFxyXG5cdFx0XHRhd2FpdCB0aGlzLmxvYWREYXRhKClcclxuXHRcdCk7XHJcblx0fVxyXG5cclxuXHRhc3luYyBzYXZlU2V0dGluZ3MoKSB7XHJcblx0XHRhd2FpdCB0aGlzLnNhdmVEYXRhKHRoaXMuc2V0dGluZ3MpO1xyXG5cdH1cclxuXHJcblx0b25sb2FkKCkge1xyXG5cdFx0Y29uc29sZS5sb2coXCJMb2FkaW5nIFBsdWdpblwiKTtcclxuXHJcblx0XHQvLyBSZWdpc3RlciB0aGUgZXZlbnQgdG8gbGlzdGVuIGZvciBmaWxlIG1vZGlmaWNhdGlvbnNcclxuXHRcdHRoaXMucmVnaXN0ZXJFdmVudChcclxuXHRcdFx0dGhpcy5hcHAudmF1bHQub24oXCJtb2RpZnlcIiwgdGhpcy5vbkZpbGVNb2RpZnkuYmluZCh0aGlzKSlcclxuXHRcdCk7XHJcblxyXG5cdFx0dGhpcy5hZGRDb21tYW5kKHtcclxuXHRcdFx0aWQ6IFwiY3JlYXRlLW1pbmRtYXBcIixcclxuXHRcdFx0bmFtZTogXCJDb252ZXJ0IEN1cnJlbnQgRG9jdW1lbnQgdG8gTWluZG1hcFwiLFxyXG5cdFx0XHRjYWxsYmFjazogdGhpcy5jb252ZXJ0VG9NaW5kbWFwLmJpbmQodGhpcyksXHJcblx0XHR9KTtcclxuXHR9XHJcblxyXG5cdG9uRmlsZU1vZGlmeShmaWxlKSB7XHJcblx0XHRjb25zdCBhY3RpdmVGaWxlID0gdGhpcy5hcHAud29ya3NwYWNlLmdldEFjdGl2ZUZpbGUoKTtcclxuXHRcdGlmIChmaWxlLnBhdGggPT09IGFjdGl2ZUZpbGU/LnBhdGgpe1xyXG5cdFx0XHRjb25zb2xlLmxvZyhgRmlsZSBtb2RpZmllZDogJHtmaWxlLnBhdGh9YCk7XHJcblx0XHRcdHRoaXMuY29udmVydFRvTWluZG1hcCgpO1xyXG5cdFx0XHRuZXcgTm90aWNlKCdVcGRhdGVkIE1pbmRtYXAnKVxyXG5cclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdGNvbnZlcnRUb01pbmRtYXAoKSB7XHJcblx0XHRjb25zdCBhY3RpdmVGaWxlID0gdGhpcy5hcHAud29ya3NwYWNlLmdldEFjdGl2ZUZpbGUoKTtcclxuXHRcdGlmICghYWN0aXZlRmlsZSkge1xyXG5cdFx0XHRjb25zb2xlLmxvZyhcIk5vIGFjdGl2ZSBmaWxlIGZvdW5kLlwiKTtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cclxuXHRcdGNvbnN0IGJhc2VQYXRoID0gKHRoaXMuYXBwLnZhdWx0LmFkYXB0ZXIgYXMgYW55KS5iYXNlUGF0aDtcclxuXHRcdGNvbnN0IGRvY1BhdGggPSBhY3RpdmVGaWxlLnBhdGg7XHJcblx0XHRjb25zdCBkb2NBYnNQYXRoID0gYCR7YmFzZVBhdGh9XFxcXCR7ZG9jUGF0aH1gO1xyXG5cdFx0Y29uc3QgY2FudmFzUGF0aCA9IGRvY1BhdGgucmVwbGFjZShcIi5tZFwiLCBcIi5jYW52YXNcIik7XHJcblx0XHRjb25zdCBjYW52YXNBYnNQYXRoID0gYCR7YmFzZVBhdGh9XFxcXCR7Y2FudmFzUGF0aH1gO1xyXG5cclxuXHRcdGNvbnNvbGUubG9nKFwiRG9jdW1lbnQgcGF0aFwiLCBkb2NBYnNQYXRoKTtcclxuXHRcdGNvbnNvbGUubG9nKFwiQ2FudmFzIHBhdGhcIiwgY2FudmFzQWJzUGF0aCk7XHJcblxyXG5cdFx0Y29uc3QgcHl0aG9uUGF0aCA9IGAke2Jhc2VQYXRofVxcXFwub2JzaWRpYW5cXFxccGx1Z2luc1xcXFxTeW5kZXNpXFxcXG1haW4ucHlgO1xyXG5cdFx0Y29uc3QgY29tbWFuZCA9IGBweXRob24gXCIke3B5dGhvblBhdGh9XCIgLS1zcmMgXCIke2RvY0Fic1BhdGh9XCIgLS1kZXN0IFwiJHtjYW52YXNBYnNQYXRofVwiYDtcclxuXHJcblx0XHRleGVjKGNvbW1hbmQsIChlcnJvciwgc3Rkb3V0LCBzdGRlcnIpID0+IHtcclxuXHRcdFx0aWYgKGVycm9yKSB7XHJcblx0XHRcdFx0Y29uc29sZS5lcnJvcihgRXJyb3I6ICR7ZXJyb3IubWVzc2FnZX1gKTtcclxuXHRcdFx0XHRyZXR1cm47XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGlmIChzdGRlcnIpIHtcclxuXHRcdFx0XHRjb25zb2xlLmVycm9yKGBTdGRlcnI6ICR7c3RkZXJyfWApO1xyXG5cdFx0XHRcdHJldHVybjtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Y29uc29sZS5sb2coYFN0ZG91dDogJHtzdGRvdXR9YCk7XHJcblx0XHR9KTtcclxuXHJcblx0XHRjb25zb2xlLmxvZyhcIkVuZFwiKTtcclxuXHR9XHJcblxyXG5cdG9udW5sb2FkKCkge1xyXG5cdFx0Y29uc29sZS5sb2coXCJVbmxvYWRpbmcgUGx1Z2luXCIpO1xyXG5cdH1cclxufVxyXG4iXSwKICAibWFwcGluZ3MiOiAiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsc0JBQStCO0FBQy9CLDJCQUFxQjtBQU1yQixJQUFNLGtCQUEyQztBQUFBLEVBQ2hELFVBQVU7QUFDWDtBQUVBLElBQXFCLFVBQXJCLGNBQXFDLHVCQUFPO0FBQUEsRUFHM0MsTUFBTSxlQUFlO0FBQ3BCLFNBQUssV0FBVyxPQUFPO0FBQUEsTUFDdEIsQ0FBQztBQUFBLE1BQ0Q7QUFBQSxNQUNBLE1BQU0sS0FBSyxTQUFTO0FBQUEsSUFDckI7QUFBQSxFQUNEO0FBQUEsRUFFQSxNQUFNLGVBQWU7QUFDcEIsVUFBTSxLQUFLLFNBQVMsS0FBSyxRQUFRO0FBQUEsRUFDbEM7QUFBQSxFQUVBLFNBQVM7QUFDUixZQUFRLElBQUksZ0JBQWdCO0FBRzVCLFNBQUs7QUFBQSxNQUNKLEtBQUssSUFBSSxNQUFNLEdBQUcsVUFBVSxLQUFLLGFBQWEsS0FBSyxJQUFJLENBQUM7QUFBQSxJQUN6RDtBQUVBLFNBQUssV0FBVztBQUFBLE1BQ2YsSUFBSTtBQUFBLE1BQ0osTUFBTTtBQUFBLE1BQ04sVUFBVSxLQUFLLGlCQUFpQixLQUFLLElBQUk7QUFBQSxJQUMxQyxDQUFDO0FBQUEsRUFDRjtBQUFBLEVBRUEsYUFBYSxNQUFNO0FBQ2xCLFVBQU0sYUFBYSxLQUFLLElBQUksVUFBVSxjQUFjO0FBQ3BELFFBQUksS0FBSyxVQUFTLHlDQUFZLE9BQUs7QUFDbEMsY0FBUSxJQUFJLGtCQUFrQixLQUFLLE1BQU07QUFDekMsV0FBSyxpQkFBaUI7QUFDdEIsVUFBSSx1QkFBTyxpQkFBaUI7QUFBQSxJQUU3QjtBQUFBLEVBQ0Q7QUFBQSxFQUVBLG1CQUFtQjtBQUNsQixVQUFNLGFBQWEsS0FBSyxJQUFJLFVBQVUsY0FBYztBQUNwRCxRQUFJLENBQUMsWUFBWTtBQUNoQixjQUFRLElBQUksdUJBQXVCO0FBQ25DO0FBQUEsSUFDRDtBQUVBLFVBQU0sV0FBWSxLQUFLLElBQUksTUFBTSxRQUFnQjtBQUNqRCxVQUFNLFVBQVUsV0FBVztBQUMzQixVQUFNLGFBQWEsR0FBRyxhQUFhO0FBQ25DLFVBQU0sYUFBYSxRQUFRLFFBQVEsT0FBTyxTQUFTO0FBQ25ELFVBQU0sZ0JBQWdCLEdBQUcsYUFBYTtBQUV0QyxZQUFRLElBQUksaUJBQWlCLFVBQVU7QUFDdkMsWUFBUSxJQUFJLGVBQWUsYUFBYTtBQUV4QyxVQUFNLGFBQWEsR0FBRztBQUN0QixVQUFNLFVBQVUsV0FBVyxzQkFBc0IsdUJBQXVCO0FBRXhFLG1DQUFLLFNBQVMsQ0FBQyxPQUFPLFFBQVEsV0FBVztBQUN4QyxVQUFJLE9BQU87QUFDVixnQkFBUSxNQUFNLFVBQVUsTUFBTSxTQUFTO0FBQ3ZDO0FBQUEsTUFDRDtBQUVBLFVBQUksUUFBUTtBQUNYLGdCQUFRLE1BQU0sV0FBVyxRQUFRO0FBQ2pDO0FBQUEsTUFDRDtBQUVBLGNBQVEsSUFBSSxXQUFXLFFBQVE7QUFBQSxJQUNoQyxDQUFDO0FBRUQsWUFBUSxJQUFJLEtBQUs7QUFBQSxFQUNsQjtBQUFBLEVBRUEsV0FBVztBQUNWLFlBQVEsSUFBSSxrQkFBa0I7QUFBQSxFQUMvQjtBQUNEOyIsCiAgIm5hbWVzIjogW10KfQo=
