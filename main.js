/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => Syndesi
});
module.exports = __toCommonJS(main_exports);
var import_obsidian2 = require("obsidian");
var import_child_process = require("child_process");

// settings.ts
var import_obsidian = require("obsidian");
var SyndesiSettings = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("Max Header Level").setDesc("Fill later").addText(
      (text) => text.setPlaceholder("Heading Level").setValue(this.plugin.settings.maxLevel.toString()).onChange(async (value) => {
        this.plugin.settings.maxLevel = Number(value);
        console.log("Max Heading Level Now", value);
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("Auto Sync").setDesc("Automatically sync mindmap on file modification").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.autoSync).onChange(async (value) => {
        this.plugin.settings.autoSync = value;
        console.log("Auto Sync Now", value);
        await this.plugin.saveSettings();
      })
    );
  }
};

// main.ts
var DefaultSettings = {
  maxLevel: 4,
  autoSync: false
};
var Syndesi = class extends import_obsidian2.Plugin {
  async loadSettings() {
    this.settings = Object.assign(
      {},
      DefaultSettings,
      await this.loadData()
    );
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  async onload() {
    console.log("Loading Plugin");
    await this.loadSettings();
    this.registerEvent(
      this.app.vault.on("modify", this.onFileModify.bind(this))
    );
    this.addSettingTab(new SyndesiSettings(this.app, this));
    this.addCommand({
      id: "create-mindmap",
      name: "Convert Current Document to Mindmap",
      callback: this.convertToMindmap.bind(this)
    });
  }
  onFileModify(file) {
    if (!this.settings.autoSync)
      return;
    const activeFile = this.app.workspace.getActiveFile();
    if (file.path === (activeFile == null ? void 0 : activeFile.path) && file.extension === "md") {
      console.log(`Markdown file modified: ${file.path}`);
      this.convertToMindmap();
      new import_obsidian2.Notice("Updated Mindmap");
    }
  }
  convertToMindmap() {
    const activeFile = this.app.workspace.getActiveFile();
    if (!activeFile) {
      console.log("No active file found.");
      return;
    }
    const basePath = this.app.vault.adapter.basePath;
    const docPath = activeFile.path;
    const docAbsPath = `${basePath}\\${docPath}`;
    const canvasPath = docPath.replace(".md", ".canvas");
    const canvasAbsPath = `${basePath}\\${canvasPath}`;
    const pythonPath = `${basePath}\\.obsidian\\plugins\\Syndesi\\main.py`;
    const command = `python "${pythonPath}" --src "${docAbsPath}" --dest "${canvasAbsPath}" --max-header ${this.settings.maxLevel}`;
    console.log(`Generated Command ${command}`);
    (0, import_child_process.exec)(command, (error, stdout, stderr) => {
      if (error) {
        console.error(`Error: ${error.message}`);
        return;
      }
      if (stderr) {
        console.error(`Stderr: ${stderr}`);
        return;
      }
      console.log(`Stdout: ${stdout}`);
    });
    console.log("End");
  }
  onunload() {
    console.log("Unloading Plugin");
  }
};
//# sourceMappingURL=data:application/json;base64,
